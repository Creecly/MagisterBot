import logging
import sqlite3
import asyncio
import uuid
import time
import requests
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from bs4 import BeautifulSoup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

TOKEN = "7706490458:AAHoDEEq6Ggx_vNPYRXNEhnSEnd9DRbSwbg"
CRYPTOBOT_API_KEY = "415001:AAdT2OYF2JE9f3pmrGGUWAMRE7PxcNAW3Ac"
CRYPTOBOT_API_URL = "https://pay.crypt.bot/api"
ADMIN_ID = 7586266147  # –í–∞—à —Ä–µ–∞–ª—å–Ω—ã–π Telegram ID
SUPPORT_CHAT_ID = ADMIN_ID

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('orders.db')
    cursor = conn.cursor()

    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='orders'")
    table_exists = cursor.fetchone()

    if table_exists:
        columns_to_add = [
            ("username", "TEXT"),
            ("product_name", "TEXT NOT NULL DEFAULT ''"),
            ("delivered", "BOOLEAN DEFAULT 0"),
            ("error_message", "TEXT"),
            ("proxy_list", "TEXT")
        ]

        for column_name, column_type in columns_to_add:
            try:
                cursor.execute(f"ALTER TABLE orders ADD COLUMN {column_name} {column_type}")
                logger.info(f"Added column {column_name} to orders table")
            except sqlite3.OperationalError as e:
                if "duplicate column name" not in str(e):
                    logger.error(f"Error adding column {column_name}: {e}")
    else:
        cursor.execute('''CREATE TABLE orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            username TEXT,
            order_id TEXT UNIQUE NOT NULL,
            invoice_id INTEGER,
            amount REAL NOT NULL,
            currency TEXT NOT NULL,
            status TEXT DEFAULT 'waiting',
            timestamp REAL NOT NULL,
            product_type TEXT NOT NULL,
            product_name TEXT NOT NULL,
            delivered BOOLEAN DEFAULT 0,
            error_message TEXT,
            proxy_list TEXT
        )''')
        logger.info("Created new orders table")

    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å CryptoBot
async def create_cryptobot_invoice(user_id, amount, currency="USDT", description="–¢–æ–≤–∞—Ä"):
    url = f"{CRYPTOBOT_API_URL}/createInvoice"
    headers = {"Crypto-Pay-API-Token": CRYPTOBOT_API_KEY}

    payload = {
        "asset": currency,
        "amount": str(amount),
        "description": description,
        "hidden_message": f"Order for user {user_id}",
        "expires_in": 3600,
        "paid_btn_name": "viewItem",
        "paid_btn_url": "https://t.me/Jodykey",
        "allow_comments": False
    }

    try:
        response = requests.post(url, headers=headers, json=payload, timeout=10)
        data = response.json()
        logger.info(f"CryptoBot API response: {data}")

        if data.get("ok"):
            return data["result"], None
        else:
            error_msg = data.get("error", {}).get("name", "Unknown error")
            logger.error(f"CryptoBot API error: {error_msg}")
            return None, f"CryptoBot Error: {error_msg}"

    except requests.exceptions.RequestException as e:
        logger.error(f"Request to CryptoBot failed: {str(e)}")
        return None, f"Connection Error: {str(e)}"
    except Exception as e:
        logger.error(f"Unexpected error: {str(e)}")
        return None, f"Unexpected Error: {str(e)}"

async def check_cryptobot_payment(invoice_id):
    url = f"{CRYPTOBOT_API_URL}/getInvoices?invoice_ids={invoice_id}"
    headers = {"Crypto-Pay-API-Token": CRYPTOBOT_API_KEY}

    try:
        response = requests.get(url, headers=headers, timeout=10)
        data = response.json()
        logger.info(f"CryptoBot check payment response: {data}")

        if data.get("ok") and data.get("result", {}).get("items"):
            invoice = data["result"]["items"][0]
            if invoice.get("status") == "paid":
                return True
            elif invoice.get("status") in ["active", "expired"]:
                return False
            else:
                logger.warning(f"Unknown invoice status: {invoice.get('status')}")
                return False
        return False
    except Exception as e:
        logger.error(f"Failed to check payment: {str(e)}")
        return False

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ–∂–∏—Ö –ø—Ä–æ–∫—Å–∏
def fetch_fresh_proxies():
    try:
        url = "https://www.sslproxies.org/"
        response = requests.get(url, timeout=10)
        soup = BeautifulSoup(response.text, 'html.parser')
        table = soup.find('table')
        if not table:
            return None

        proxies = []
        for row in table.find_all('tr')[1:6]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 –ø—Ä–æ–∫—Å–∏
            cols = row.find_all('td')
            if len(cols) >= 2:
                proxies.append(f"{cols[0].text}:{cols[1].text}")
        return proxies
    except Exception as e:
        logger.error(f"Proxy fetch error: {e}")
        return None

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
async def generate_payment_order(user_id, username, amount, product_type, product_name):
    order_id = str(uuid.uuid4())
    timestamp = time.time()

    invoice, error_msg = await create_cryptobot_invoice(
        user_id,
        amount,
        description=f"{product_name} (ID: {order_id})"
    )

    if not invoice:
        try:
            conn = sqlite3.connect('orders.db')
            cursor = conn.cursor()
            cursor.execute(
                """INSERT INTO orders 
                (user_id, username, order_id, amount, currency, 
                 timestamp, product_type, product_name, status, error_message) 
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
                (user_id, username, order_id, amount, "USDT",
                 timestamp, product_type, product_name, "error", error_msg)
            )
            conn.commit()
        except sqlite3.Error as e:
            logger.error(f"Database error: {e}")
        finally:
            conn.close()

        try:
            await bot.send_message(
                chat_id=ADMIN_ID,
                text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:\n\n"
                     f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
                     f"üõí –¢–æ–≤–∞—Ä: {product_name}\n"
                     f"üí∞ –°—É–º–º–∞: {amount} USDT\n"
                     f"üì¶ ID –∑–∞–∫–∞–∑–∞: {order_id}\n"
                     f"üö® –û—à–∏–±–∫–∞: {error_msg}"
            )
        except Exception as e:
            logger.error(f"Failed to send admin notification: {e}")

        return None, None, None, error_msg

    try:
        conn = sqlite3.connect('orders.db')
        cursor = conn.cursor()
        cursor.execute(
            """INSERT INTO orders 
            (user_id, username, order_id, invoice_id, amount, currency, 
             timestamp, product_type, product_name, status) 
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
            (user_id, username, order_id, invoice["invoice_id"], amount, "USDT",
             timestamp, product_type, product_name, "waiting")
        )
        conn.commit()
    except sqlite3.Error as e:
        logger.error(f"Database error: {e}")
        return None, None, None, f"Database Error: {str(e)}"
    finally:
        conn.close()

    try:
        await bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n\n"
                 f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user_id})\n"
                 f"üõí –¢–æ–≤–∞—Ä: {product_name}\n"
                 f"üí∞ –°—É–º–º–∞: {amount} USDT\n"
                 f"üì¶ ID –∑–∞–∫–∞–∑–∞: <code>{order_id}</code>\n"
                 f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: {invoice['pay_url']}\n\n"
                 f"–°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã"
        )
    except Exception as e:
        logger.error(f"Failed to send admin notification: {e}")

    return invoice["pay_url"], order_id, invoice["invoice_id"], None

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
def update_order_status(order_id, status, proxies=None):
    try:
        conn = sqlite3.connect('orders.db')
        cursor = conn.cursor()

        if proxies:
            proxy_str = "\n".join(proxies)
            cursor.execute(
                "UPDATE orders SET status = ?, proxy_list = ? WHERE order_id = ?",
                (status, proxy_str, order_id)
            )
        else:
            cursor.execute(
                "UPDATE orders SET status = ? WHERE order_id = ?",
                (status, order_id)
            )
        conn.commit()
    except sqlite3.Error as e:
        logger.error(f"Database error: {e}")
    finally:
        conn.close()

# –ü–æ–º–µ—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π
def mark_order_delivered(order_id):
    try:
        conn = sqlite3.connect('orders.db')
        cursor = conn.cursor()
        cursor.execute(
            "UPDATE orders SET delivered = 1 WHERE order_id = ?",
            (order_id,)
        )
        conn.commit()
    except sqlite3.Error as e:
        logger.error(f"Database error: {e}")
    finally:
        conn.close()

# –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
def get_order_info(order_id):
    try:
        conn = sqlite3.connect('orders.db')
        cursor = conn.cursor()
        cursor.execute(
            "SELECT user_id, username, product_name, amount, status, delivered, proxy_list FROM orders WHERE order_id = ?",
            (order_id,)
        )
        order = cursor.fetchone()
        return order
    except sqlite3.Error as e:
        logger.error(f"Database error: {e}")
        return None
    finally:
        conn.close()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def show_main_menu(message: types.Message or types.CallbackQuery):
    caption = """
üõí <b>JODY SHOP</b> - –í–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π

üîπ <b>Proxies</b> - –°–≤–µ–∂–∏–µ SOCKS5 –ø—Ä–æ–∫—Å–∏
üîπ <b>Bots</b> - –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
üîπ <b>Services</b> - –î—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:
"""
    try:
        # –î–ª—è CallbackQuery
        if isinstance(message, types.CallbackQuery):
            message = message.message
            try:
                await message.edit_caption(
                    caption=caption,
                    reply_markup=create_main_keyboard()
                )
                return
            except Exception as e:
                logger.warning(f"Couldn't edit message caption: {e}")
                await message.delete()

        # –î–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        photo = FSInputFile("descript.png")
        await bot.send_photo(
            chat_id=message.chat.id,
            photo=photo,
            caption=caption,
            reply_markup=create_main_keyboard()
        )

    except Exception as e:
        logger.error(f"Error in show_main_menu: {e}")
        try:
            await message.answer(
                text=caption,
                reply_markup=create_main_keyboard()
            )
        except Exception as fallback_error:
            logger.error(f"Fallback error in show_main_menu: {fallback_error}")

def create_main_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üîπ Proxies", callback_data="menu_proxies"),
        InlineKeyboardButton(text="üîπ Bots", callback_data="menu_bots"),
        InlineKeyboardButton(text="üîπ Services", callback_data="menu_services")
    )
    builder.row(
        InlineKeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="menu_support")  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    )
    return builder.as_markup()

# –ú–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫)
@dp.callback_query(F.data == "menu_support")
async def menu_support(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üì® –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url=f"https://t.me/Jodykey")  # –í–∞—à username –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç
    )
    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
    )

    try:
        await callback.message.edit_caption(
            caption="<b>üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n"
                   "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:\n\n"
                   "1. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n"
                   "2. –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É\n"
                   "3. –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)\n\n"
                   "–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logger.error(f"Error in menu_support: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
# –ú–µ–Ω—é –ø—Ä–æ–∫—Å–∏
@dp.callback_query(F.data == "menu_proxies")
async def menu_proxies(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å –ø—Ä–æ–∫—Å–∏ (0.5 USDT)", callback_data="buy_proxies")
    )
    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
    )

    try:
        await callback.message.edit_caption(
            caption="<b>üîπ Proxies</b>\n\nüõí <b>SOCKS5 –ø—Ä–æ–∫—Å–∏</b>\n"
                   "‚úîÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–¥–∞—á–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã\n"
                   "‚úîÔ∏è –í—ã –ø–æ–ª—É—á–∏—Ç–µ 5 —Å–≤–µ–∂–∏—Ö –ø—Ä–æ–∫—Å–∏\n"
                   "‚úîÔ∏è –¶–µ–Ω–∞: 0.5 USDT",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logger.error(f"Error in menu_proxies: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
# –ú–µ–Ω—é —Å–µ—Ä–≤–∏—Å–æ–≤
@dp.callback_query(F.data == "menu_services")
async def menu_services(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
    )

    try:
        await callback.message.edit_caption(
            caption="<b>üîπ Services</b>\n\nüöß –†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç!",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logger.error(f"Error in menu_services: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", show_alert=True)

@dp.callback_query(F.data == "buy_proxies")
async def buy_proxies(callback: types.CallbackQuery):
    username = f"@{callback.from_user.username}" if callback.from_user.username else str(callback.from_user.id)

    payment_url, order_id, invoice_id, error_msg = await generate_payment_order(
        callback.from_user.id,
        username,
        1.5,
        "proxies",
        "SOCKS5 –ø—Ä–æ–∫—Å–∏ (5 —à—Ç—É–∫)"
    )

    if error_msg:
        await callback.message.edit_caption(
            caption=f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞</b>\n\n"
                   f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π\n\n"
                   f"–û—à–∏–±–∫–∞: {error_msg}",
            reply_markup=InlineKeyboardBuilder().add(
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_proxies")
            ).as_markup()
        )
        return

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url),
        InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"check:{order_id}")
    )
    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_proxies")
    )

    try:
        await callback.message.edit_caption(
            caption="üíµ <b>–û–ø–ª–∞—Ç–∞ 0.5 USDT</b>\n\n"
                   "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã\n"
                   "2. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–Ø –æ–ø–ª–∞—Ç–∏–ª'\n\n"
                   "üîπ –í—ã –ø–æ–ª—É—á–∏—Ç–µ 5 —Å–≤–µ–∂–∏—Ö SOCKS5 –ø—Ä–æ–∫—Å–∏\n\n"
                   f"<b>ID –∑–∞–∫–∞–∑–∞:</b> <code>{order_id}</code>",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logger.error(f"Error editing message in buy_proxies: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
# –ú–µ–Ω—é –±–æ—Ç–æ–≤
@dp.callback_query(F.data == "menu_bots")
async def menu_bots(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üé∞ –ö–∞–∑–∏–Ω–æ –±–æ—Ç (3$)", callback_data="bot_casino_v1")
    )
    builder.row(
        InlineKeyboardButton(text="üé∞ –ö–∞–∑–∏–Ω–æ –±–æ—Ç V2 (5$)", callback_data="bot_casino_v2")
    )
    builder.row(
        InlineKeyboardButton(text="ü§ù –ì–∞—Ä–∞–Ω—Ç –±–æ—Ç (8$)", callback_data="bot_garant")
    )
    builder.row(
        InlineKeyboardButton(text="ü§ñ –ë–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏", callback_data="bot_automation")
    )
    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
    )

    try:
        await callback.message.edit_caption(
            caption="<b>üîπ Bots</b>\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logger.error(f"Error in menu_bots: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∫—É–ø–∫–∏ –±–æ—Ç–æ–≤
@dp.callback_query(F.data.startswith("bot_"))
async def handle_bot_purchase(callback: types.CallbackQuery):
    bot_type = callback.data

    if bot_type == "bot_automation":
        try:
            await callback.message.edit_caption(
                caption="<b>ü§ñ –ë–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏</b>\n\n"
                        "–î–ª—è –∑–∞–∫–∞–∑–∞ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ @Jodykey",
                reply_markup=InlineKeyboardBuilder().add(
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_bots")
                ).as_markup()
            )
        except Exception as e:
            logger.error(f"Error in bot_automation: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        return

    bot_data = {
        "bot_casino_v1": {
            "name": "–ö–∞–∑–∏–Ω–æ –±–æ—Ç V1",
            "price": 4,
            "description": "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è –∫–∞–∑–∏–Ω–æ\n–¶–µ–Ω–∞: 4 USDT"
        },
        "bot_casino_v2": {
            "name": "–ö–∞–∑–∏–Ω–æ –±–æ—Ç V2",
            "price": 6,
            "description": "–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –¥–æ–ø. —Ñ—É–Ω–∫—Ü–∏—è–º–∏\n–¶–µ–Ω–∞: 6 USDT"
        },
        "bot_garant": {
            "name": "–ì–∞—Ä–∞–Ω—Ç –±–æ—Ç",
            "price": 10,
            "description": "–ë–æ—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫\n–¶–µ–Ω–∞: 10 USDT"
        }
    }

    product = bot_data[bot_type]
    username = f"@{callback.from_user.username}" if callback.from_user.username else str(callback.from_user.id)

    payment_url, order_id, invoice_id, error_msg = await generate_payment_order(
        callback.from_user.id,
        username,
        product["price"],
        bot_type,
        product["name"]
    )

    if error_msg:
        try:
            await callback.message.edit_caption(
                caption=f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞</b>\n\n"
                        f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π\n\n"
                        f"–û—à–∏–±–∫–∞: {error_msg}",
                reply_markup=InlineKeyboardBuilder().add(
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_bots")
                ).as_markup()
            )
        except Exception as e:
            logger.error(f"Error showing payment error: {e}")
            await callback.answer(f"–û—à–∏–±–∫–∞: {error_msg}", show_alert=True)
        return

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url),
        InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"check:{order_id}")
    )
    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_bots")
    )

    try:
        await callback.message.edit_caption(
            caption=f"üé∞ <b>{product['name']}</b>\n\n"
                    f"{product['description']}\n\n"
                    "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã\n"
                    "2. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–Ø –æ–ø–ª–∞—Ç–∏–ª'\n\n"
                    f"<b>ID –∑–∞–∫–∞–∑–∞:</b> <code>{order_id}</code>",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logger.error(f"Error in handle_bot_purchase: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", show_alert=True)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã
@dp.callback_query(F.data.startswith("check:"))
async def check_payment(callback: types.CallbackQuery):
    order_id = callback.data.split(":")[1]
    order_info = get_order_info(order_id)

    if not order_info:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    user_id, username, product_name, amount, status, delivered, proxy_list = order_info

    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
        if status == "paid":
            await handle_paid_order(callback, order_info)
            return

        # –ï—Å–ª–∏ –≤ –±–∞–∑–µ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ API
        is_paid = await check_cryptobot_payment(order_info[3])  # invoice_id

        if is_paid:
            update_order_status(order_id, "paid")
            await handle_paid_order(callback, order_info)
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º timestamp –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ callback_data
            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(
                text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞",
                callback_data=f"check:{order_id}:{int(time.time())}")
            )

            try:
                await callback.message.edit_caption(
                    caption=f"‚åõ –û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞.\n\n"
                            f"–ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 2-5 –º–∏–Ω—É—Ç –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–Ω–æ–≤–∞.\n"
                            f"<b>ID –∑–∞–∫–∞–∑–∞:</b> <code>{order_id}</code>",
                    reply_markup=builder.as_markup()
                )
            except Exception as e:
                logger.error(f"Error editing message: {e}")
                await callback.message.answer(
                    text=f"‚åõ –û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞.\n\n"
                         f"–ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 2-5 –º–∏–Ω—É—Ç –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–Ω–æ–≤–∞.\n"
                         f"<b>ID –∑–∞–∫–∞–∑–∞:</b> <code>{order_id}</code>",
                    reply_markup=builder.as_markup()
                )

        await callback.answer()
    except Exception as e:
        logger.error(f"Error in check_payment: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)


async def handle_paid_order(callback: types.CallbackQuery, order_info):
    order_id = callback.data.split(":")[1]
    user_id, username, product_name, amount, status, delivered, proxy_list = order_info

    new_caption = f"‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\nüõí –¢–æ–≤–∞—Ä: {product_name}\nüí∞ –°—É–º–º–∞: {amount} USDT\n\n"

    if product_name.startswith("SOCKS5"):
        if proxy_list:
            new_caption += f"<b>–í–∞—à–∏ 5 –ø—Ä–æ–∫—Å–∏:</b>\n<code>{proxy_list}</code>\n\n"
        else:
            proxies = fetch_fresh_proxies()
            if proxies:
                proxy_str = "\n".join(proxies)
                update_order_status(order_id, "paid", proxies)
                new_caption += f"<b>–í–∞—à–∏ 5 –ø—Ä–æ–∫—Å–∏:</b>\n<code>{proxy_str}</code>\n\n"
            else:
                new_caption += "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω"
                await bot.send_message(
                    chat_id=ADMIN_ID,
                    text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞:\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\nüì¶ ID –∑–∞–∫–∞–∑–∞: <code>{order_id}</code>"
                )
    else:
        new_caption += "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ç–æ–≤–∞—Ä" if not delivered else "‚úÖ –¢–æ–≤–∞—Ä –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
        if not delivered:
            await bot.send_message(
                chat_id=ADMIN_ID,
                text=f"üí∞ –ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω:\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\nüõí –¢–æ–≤–∞—Ä: {product_name}\nüí∞ –°—É–º–º–∞: {amount} USDT\nüì¶ ID –∑–∞–∫–∞–∑–∞: <code>{order_id}</code>",
                reply_markup=InlineKeyboardBuilder().add(
                    InlineKeyboardButton(
                        text="‚úÖ –¢–æ–≤–∞—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
                        callback_data=f"delivered:{order_id}"
                    )
                ).as_markup()
            )

    try:
        await callback.message.edit_caption(
            caption=new_caption,
            reply_markup=None
        )
    except Exception as e:
        logger.error(f"Error editing message in handle_paid_order: {e}")

@dp.message(F.chat.id != ADMIN_ID)
async def handle_user_messages(message: types.Message):
    if message.text and not message.text.startswith('/'):
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        try:
            await bot.send_message(
                chat_id=ADMIN_ID,
                text=f"‚úâÔ∏è <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
                     f"üë§ ID: {message.from_user.id}\n"
                     f"üîπ Username: @{message.from_user.username}\n\n"
                     f"üìù –¢–µ–∫—Å—Ç:\n{message.text}",
                reply_markup=InlineKeyboardBuilder().add(
                    InlineKeyboardButton(
                        text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å",
                        url=f"tg://user?id={message.from_user.id}"
                    )
                ).as_markup()
            )
            await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!")
        except Exception as e:
            logger.error(f"Error forwarding message to admin: {e}")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def check_pending_payments():
    while True:
        try:
            conn = sqlite3.connect('orders.db')
            cursor = conn.cursor()
            cursor.execute(
                "SELECT order_id, invoice_id, user_id, product_name, amount FROM orders WHERE status = 'waiting'"
            )
            pending_orders = cursor.fetchall()

            for order in pending_orders:
                order_id, invoice_id, user_id, product_name, amount = order
                is_paid = await check_cryptobot_payment(invoice_id)

                if is_paid:
                    update_order_status(order_id, "paid")
                    # –û–ø–æ–≤–µ—Å—Ç–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
                    try:
                        await bot.send_message(
                            chat_id=user_id,
                            text=f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –Ω–∞ {product_name} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω!"
                        )
                    except Exception as e:
                        logger.error(f"Failed to notify user {user_id}: {e}")

            await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

        except Exception as e:
            logger.error(f"Error in check_pending_payments: {e}")
            await asyncio.sleep(60)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
@dp.callback_query(F.data.startswith("delivered:"))
async def mark_as_delivered(callback: types.CallbackQuery):
    order_id = callback.data.split(":")[1]
    order_info = get_order_info(order_id)

    if not order_info:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    user_id, username, product_name, amount, status, delivered, _ = order_info

    if delivered:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω", show_alert=True)
        return

    mark_order_delivered(order_id)

    try:
        await bot.send_message(
            chat_id=user_id,
            text=f"‚úÖ <b>–í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω!</b>\n\n"
                 f"üõí –¢–æ–≤–∞—Ä: {product_name}\n"
                 f"üí∞ –°—É–º–º–∞: {amount} USDT\n\n"
                 "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @Jodykey –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"
        )
    except Exception as e:
        logger.error(f"Failed to notify user: {e}")

    try:
        await callback.message.edit_text(
            text=f"‚úÖ <b>–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–æ–≤–∞—Ä–∞</b>\n\n"
                 f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user_id})\n"
                 f"üõí –¢–æ–≤–∞—Ä: {product_name}\n"
                 f"üí∞ –°—É–º–º–∞: {amount} USDT\n"
                 f"üì¶ ID –∑–∞–∫–∞–∑–∞: <code>{order_id}</code>\n\n"
                 "–°—Ç–∞—Ç—É—Å: –¢–æ–≤–∞—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
        )
    except Exception as e:
        logger.error(f"Error editing message in mark_as_delivered: {e}")
    finally:
        await callback.answer("‚úÖ –¢–æ–≤–∞—Ä –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.callback_query(F.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    await show_main_menu(callback)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await show_main_menu(message)

# –ö–æ–º–∞–Ω–¥–∞ /orders –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message(Command("orders"))
async def cmd_orders(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return

    try:
        conn = sqlite3.connect('orders.db')
        cursor = conn.cursor()
        cursor.execute(
            "SELECT order_id, username, product_name, amount, status, delivered FROM orders ORDER BY timestamp DESC LIMIT 10"
        )
        orders = cursor.fetchall()

        if not orders:
            await message.answer("‚ÑπÔ∏è –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤")
            return

        text = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:</b>\n\n"
        for order in orders:
            order_id, username, product_name, amount, status, delivered = order
            text += (
                f"üì¶ <b>–ó–∞–∫–∞–∑:</b> <code>{order_id}</code>\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
                f"üõí –¢–æ–≤–∞—Ä: {product_name}\n"
                f"üí∞ –°—É–º–º–∞: {amount} USDT\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
                f"üöö –û—Ç–ø—Ä–∞–≤–ª–µ–Ω: {'‚úÖ' if delivered else '‚ùå'}\n\n"
            )

        await message.answer(text)
    except sqlite3.Error as e:
        logger.error(f"Database error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤")
    finally:
        conn.close()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    init_db()

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
    asyncio.create_task(check_pending_payments())

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())